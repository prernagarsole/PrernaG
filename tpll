import json
import urllib.request
from urllib.error import HTTPError

# GitHub personal access token
token = "YOUR_GITHUB_TOKEN"  # Replace with your actual token

# GitHub API base URL
base_url = "https://api.github.com/orgs"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    try:
        with urllib.request.urlopen(req) as response:
            data = response.read()
            # Debugging: Print raw data
            print(f"Raw response data: {data.decode('utf-8')}")
            return data
    except HTTPError as e:
        print(f"HTTP Error [{e.code}]: {e.reason}")
        return None

# Function to get TPO- organizations
def get_tpo_organizations():
    orgs_url = f"{base_url}/user/orgs"
    orgs_data = fetch_data(orgs_url)
    
    if not orgs_data:
        print("Failed to retrieve organizations or no organizations found.")
        return []

    try:
        organizations = json.loads(orgs_data.decode('utf-8'))
    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
        return []

    tpo_orgs = []
    
    for org in organizations:
        print(f"Checking organization: {org['login']}")
        if org["login"].startswith("TPO-"):
            print(f"Matched TPO- organization: {org['login']}")
            tpo_orgs.append(org["login"])
    
    print(f"Found TPO organizations: {tpo_orgs}")
    return tpo_orgs

# Fetching TPO organizations
tpo_organizations = get_tpo_organizations()
print(f"Final TPO organizations: {tpo_organizations}")

# Fetch repositories for each TPO organization
def fetch_repositories(org_name):
    repos_url = f"https://api.github.com/orgs/{org_name}/repos?per_page=100"
    repos_data = fetch_data(repos_url)
    
    if not repos_data:
        return []

    try:
        repositories = json.loads(repos_data.decode('utf-8'))
    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
        return []

    return repositories

# Function to check workflows in repositories
def check_workflows(org_name):
    repos = fetch_repositories(org_name)
    workflow_results = []
    
    for repo in repos:
        repo_name = repo["name"]
        print(f"Checking repository: {repo_name}")
        
        workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"
        workflows_response = fetch_data(workflow_url)
        
        if not workflows_response:
            continue
        
        try:
            workflows_data = json.loads(workflows_response.decode('utf-8'))
        except json.JSONDecodeError as e:
            print(f"JSON Decode Error: {e}")
            continue
        
        for workflow_file in workflows_data:
            if workflow_file["type"] == "file" and workflow_file["name"].endswith(".yml"):
                file_download_url = workflow_file["download_url"]
                file_content = fetch_data(file_download_url).decode('utf-8')
                
                if "is_checkmarx: 'false'" in file_content:
                    workflow_results.append({
                        "Org": org_name,
                        "Repo": repo_name,
                        "Workflow File": workflow_file["name"],
                        "Condition": "is_checkmarx: 'false' - Result: FALSE"
                    })
                elif "is_checkmarx: 'true'" in file_content:
                    workflow_results.append({
                        "Org": org_name,
                        "Repo": repo_name,
                        "Workflow File": workflow_file["name"],
                        "Condition": "is_checkmarx: 'true' - Result: TRUE"
                    })
                else:
                    workflow_results.append({
                        "Org": org_name,
                        "Repo": repo_name,
                        "Workflow File": workflow_file["name"],
                        "Condition": "is_checkmarx: not present - Result: TRUE (NOT PRESENT)"
                    })

                if "orgScan: 'NFCU'" in file_content:
                    workflow_results.append({
                        "Org": org_name,
                        "Repo": repo_name,
                        "Workflow File": workflow_file["name"],
                        "Condition": "orgScan: 'NFCU' - Result: TRUE"
                    })
                elif "orgScan: 'NFCU'" not in file_content:
                    workflow_results.append({
                        "Org": org_name,
                        "Repo": repo_name,
                        "Workflow File": workflow_file["name"],
                        "Condition": "orgScan: 'NFCU' not present - Result: FALSE"
                    })

    return workflow_results

# Fetch and check workflows for each TPO organization
for org in tpo_organizations:
    results = check_workflows(org)
    # Process results or save to CSV as needed
    print(f"Workflow results for {org}: {results}")
