import json
import urllib.request
import csv
from urllib.error import HTTPError

# GitHub personal access token
token = "YOUR_GITHUB_TOKEN"  # Replace with your actual token

# GitHub API base URL
base_url = "https://api.github.com"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Hardcoded list of TPO organizations
tpo_organizations = [
    "TPO-Org1", "TPO-Org2", "TPO-Org3", "TPO-Org4", "TPO-Org5",
    "TPO-Org6", "TPO-Org7", "TPO-Org8", "TPO-Org9", "TPO-Org10",
    "TPO-Org11", "TPO-Org12", "TPO-Org13", "TPO-Org14", "TPO-Org15",
    "TPO-Org16", "TPO-Org17", "TPO-Org18", "TPO-Org19", "TPO-Org20"
]

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    try:
        with urllib.request.urlopen(req) as response:
            data = response.read()
            return data
    except HTTPError as e:
        print(f"HTTP Error [{e.code}]: {e.reason}")
        return None

# Function to fetch repositories for each TPO organization
def fetch_repositories(org_name):
    repos_url = f"https://api.github.com/orgs/{org_name}/repos?per_page=100"
    repos_data = fetch_data(repos_url)
    
    if not repos_data:
        return []

    try:
        repositories = json.loads(repos_data.decode('utf-8'))
    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
        return []

    return repositories

# Function to check workflows in repositories
def check_workflows(org_name):
    repos = fetch_repositories(org_name)
    workflow_results_with_datapower = []
    workflow_results_other_than_datapower = []
    
    for repo in repos:
        repo_name = repo["name"]
        print(f"Checking repository: {repo_name}")
        
        workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"
        workflows_response = fetch_data(workflow_url)
        
        if not workflows_response:
            continue
        
        try:
            workflows_data = json.loads(workflows_response.decode('utf-8'))
        except json.JSONDecodeError as e:
            print(f"JSON Decode Error: {e}")
            continue
        
        for workflow_file in workflows_data:
            if workflow_file["type"] == "file" and workflow_file["name"].endswith(".yml"):
                file_download_url = workflow_file["download_url"]
                file_content = fetch_data(file_download_url).decode('utf-8')
                
                result = {
                    "Org": org_name,
                    "Repo": repo_name,
                    "Workflow File": workflow_file["name"],
                    "is_checkmarx": "TRUE" if "is_checkmarx: 'true'" in file_content else "FALSE",
                    "orgScan": "TRUE" if "orgScan: 'NFCU'" in file_content else "FALSE"
                }
                
                if "datapower.yml" in workflow_file["name"] or "datapowerpolicy.yml" in workflow_file["name"]:
                    workflow_results_with_datapower.append(result)
                else:
                    workflow_results_other_than_datapower.append(result)

    return workflow_results_with_datapower, workflow_results_other_than_datapower

# Save results to CSV files
def save_to_csv(filename, data):
    with open(filename, 'w', newline='', encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=["Org", "Repo", "Workflow File", "is_checkmarx", "orgScan"])
        writer.writeheader()
        writer.writerows(data)

# Fetch and check workflows for each TPO organization
for org in tpo_organizations:
    print(f"Processing organization: {org}")
    results_with_datapower, results_other_than_datapower = check_workflows(org)
    save_to_csv('workflow_files_with_datapower.csv', results_with_datapower)
    save_to_csv('workflow_files_other_than_datapower.csv', results_other_than_datapower)
    print(f"Results saved for organization: {org}")

print("Script completed.")
