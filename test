import json
import urllib.request
import base64
import yaml

# GitHub organization details
org_name = "your_organization"  # replace with your organization name

# GitHub personal access token
token = "your_personal_access_token"  # replace with your personal access token

# GitHub API base URL
base_url = f"https://api.github.com/orgs/{org_name}/repos"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    with urllib.request.urlopen(req) as response:
        return response.read()

# Fetch all repositories in the organization
repos_data = json.loads(fetch_data(base_url))

for repo in repos_data:
    repo_name = repo["name"]
    workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"












import json
import urllib.request

# GitHub organization details
org_name = "your_organization"  # replace with your organization name

# GitHub personal access token
token = "your_personal_access_token"  # replace with your personal access token

# GitHub API base URL
base_url = f"https://api.github.com/orgs/{org_name}/repos"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    with urllib.request.urlopen(req) as response:
        return response.read()

# Fetch all repositories in the organization
repos_data = json.loads(fetch_data(base_url))

# List to collect results
results = []
found_conditions = False  # Flag to track if any conditions were found

for repo in repos_data:
    repo_name = repo["name"]
    workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"
    
    # Fetch workflow files from the .github/workflows directory
    try:
        workflows_data = json.loads(fetch_data(workflow_url))
        
        for workflow_file in workflows_data:
            if workflow_file["type"] == "file" and workflow_file["name"].endswith(".yml"):
                file_download_url = workflow_file["download_url"]
                
                # Fetch the workflow file content
                file_content = fetch_data(file_download_url).decode("utf-8")
                
                # Check conditions in the file content
                if "is_checkmarx: 'true'" in file_content.lower():
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "is_checkmarx: 'True'"
                    })
                    found_conditions = True
                elif "is_checkmarx: 'false'" in file_content.lower():
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "is_checkmarx: 'False'"
                    })
                    found_conditions = True
                
                if "orgScan: 'nfcu'" in file_content.lower():
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "orgScan: 'NFCU'"
                    })
                    found_conditions = True
    
    except Exception as e:
        print(f"Error fetching workflows for repo {repo_name}: {e}")

# Check if any conditions were found
if not found_conditions:
    print("No matching conditions found in any workflow files.")
else:
    # Print results if any conditions were found
    for result in results:
        print(f"Repo: {result['Repo']}, Workflow File: {result['Workflow File']}, Condition: {result['Condition']}")



















































import json
import urllib.request
from urllib.error import HTTPError

# GitHub organization details
org_name = "your_organization"  # replace with your organization name

# GitHub personal access token
token = "your_personal_access_token"  # replace with your personal access token

# GitHub API base URL
base_url = f"https://api.github.com/orgs/{org_name}/repos"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    try:
        with urllib.request.urlopen(req) as response:
            return response.read()
    except HTTPError as e:
        if e.code == 404:
            print(f"HTTP Error 404: {e.reason}")
        else:
            print(f"HTTP Error {e.code}: {e.reason}")
        return None

# Fetch all repositories in the organization
repos_data = []
page = 1
while True:
    url = f"{base_url}?page={page}&per_page=100"  # Fetch 100 repos per page (adjust per_page as needed)
    response = fetch_data(url)
    if not response:
        break
    page_repos = json.loads(response)
    if not page_repos:
        break
    repos_data.extend(page_repos)
    page += 1

# List to collect results
results = []

# Process each repository
for repo in repos_data:
    repo_name = repo["name"]
    workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"
    
    # Fetch workflow files from the .github/workflows directory
    workflows_response = fetch_data(workflow_url)
    if not workflows_response:
        continue
    
    workflows_data = json.loads(workflows_response)
    
    for workflow_file in workflows_data:
        if workflow_file["type"] == "file" and workflow_file["name"].endswith(".yml"):
            file_download_url = workflow_file["download_url"]
            
            # Fetch the workflow file content
            file_content = fetch_data(file_download_url).decode("utf-8")
            
            if file_content:
                # Check conditions in the file content
                is_checkmarx_true = "is_checkmarx: 'true'" in file_content
                is_checkmarx_present = "is_checkmarx:" in file_content
                is_checkmarx_false = "is_checkmarx: 'false'" in file_content
                orgScan_nfcu_present = "orgScan: 'NFCU'" in file_content
                orgScan_nfcu_not_present = "orgScan: 'NFCU'" not in file_content
                
                # Evaluate conditions and append results
                if is_checkmarx_true:
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "TRUE (is_checkmarx: 'true')"
                    })
                elif not is_checkmarx_present:
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "TRUE (No presence in WF)"
                    })
                elif is_checkmarx_false:
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "FALSE (is_checkmarx: 'false')"
                    })
                
                if orgScan_nfcu_present:
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "TRUE (orgScan: 'NFCU')"
                    })
                
                if orgScan_nfcu_not_present:
                    results.append({
                        "Repo": repo_name,
                        "Workflow File": workflow_file['name'],
                        "Condition": "FALSE (No presence in WF)"
                    })

# Print results if any conditions were found
if results:
    print("Results:")
    for result in results:
        print(f"Repo: {result['Repo']}, Workflow File: {result['Workflow File']}, Condition: {result['Condition']}")
else:
    print("No matching conditions found in any workflow files.")
