import json
import urllib.request
import base64
import yaml

# GitHub organization details
org_name = "your_organization"  # replace with your organization name

# GitHub personal access token
token = "your_personal_access_token"  # replace with your personal access token

# GitHub API base URL
base_url = f"https://api.github.com/orgs/{org_name}/repos"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    with urllib.request.urlopen(req) as response:
        return response.read()

# Fetch all repositories in the organization
repos_data = json.loads(fetch_data(base_url))

for repo in repos_data:
    repo_name = repo["name"]
    workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"












import json
import urllib.request

# GitHub organization details
org_name = "your_organization"  # replace with your organization name

# GitHub personal access token
token = "your_personal_access_token"  # replace with your personal access token

# GitHub API base URL
base_url = f"https://api.github.com/orgs/{org_name}/repos"

# Headers for API request (authentication with token)
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

# Function to fetch data from GitHub API
def fetch_data(url):
    req = urllib.request.Request(url, headers=headers)
    with urllib.request.urlopen(req) as response:
        return response.read()

# Fetch all repositories in the organization
repos_data = json.loads(fetch_data(base_url))

# List to collect results
results = []

for repo in repos_data:
    repo_name = repo["name"]
    workflow_url = f"https://api.github.com/repos/{org_name}/{repo_name}/contents/.github/workflows"
    
    # Fetch workflow files from the .github/workflows directory
    workflows_data = json.loads(fetch_data(workflow_url))
    
    for workflow_file in workflows_data:
        if workflow_file["type"] == "file" and workflow_file["name"].endswith(".yml"):
            file_download_url = workflow_file["download_url"]
            
            # Fetch the workflow file content
            file_content = fetch_data(file_download_url).decode("utf-8")
            
            # Check conditions in the file content
            is_checkmarx_true = "is_checkmarx: 'True'" in file_content
            is_checkmarx_false = "is_checkmarx: 'False'" in file_content
            orgScan_nfcu = "orgScan: 'NFCU'" in file_content
            
            if is_checkmarx_true:
                results.append({
                    "Repo": repo_name,
                    "Workflow File": workflow_file['name'],
                    "Condition": "is_checkmarx: 'True'"
                })
            elif "is_checkmarx:" not in file_content:
                results.append({
                    "Repo": repo_name,
                    "Workflow File": workflow_file['name'],
                    "Condition": "is_checkmarx not present"
                })
            elif is_checkmarx_false:
                results.append({
                    "Repo": repo_name,
                    "Workflow File": workflow_file['name'],
                    "Condition": "is_checkmarx: 'False'"
                })
            
            if orgScan_nfcu:
                results.append({
                    "Repo": repo_name,
                    "Workflow File": workflow_file['name'],
                    "Condition": "orgScan: 'NFCU'"
                })

# Print results
for result in results:
    print(f"Repo: {result['Repo']}, Workflow File: {result['Workflow File']}, Condition: {result['Condition']}")
