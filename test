# Define the function to get the memberID from the name in Active Directory
function Get-MemberIDFromName {
    param (
        [Parameter(Mandatory = $true)]
        [string]$UserName
    )

    try {
        # Create a directory entry object to connect to the root of the domain
        $root = New-Object System.DirectoryServices.DirectoryEntry("LDAP://RootDSE")
        $domain = $root.Properties["defaultNamingContext"][0]
        $directoryEntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")

        # Create a directory searcher object
        $searcher = New-Object System.DirectoryServices.DirectorySearcher($directoryEntry)

        # Set the search filter to find the user by name
        $searcher.Filter = "(&(objectCategory=person)(objectClass=user)(sAMAccountName=$UserName))"

        # Specify the properties to load
        $searcher.PropertiesToLoad.Add("memberID") | Out-Null

        # Perform the search
        $result = $searcher.FindOne()

        if ($result -ne $null) {
            # Fetch the memberID from the result
            $memberID = $result.Properties["memberID"]

            if ($memberID -ne $null -and $memberID.Count -gt 0) {
                return $memberID[0]
            } else {
                Write-Error "memberID not found for user: $UserName"
            }
        } else {
            Write-Error "User not found: $UserName"
        }
    } catch {
        Write-Error "An error occurred: $_"
    }
}

# Example usage
$UserName = "D3044"
$memberID = Get-MemberIDFromName -UserName $UserName

if ($memberID) {
    Write-Output "The memberID for $UserName is $memberID"
}
