
# Prompt for credentials
$username = Read-Host "Enter your Emp ID"
$password = Read-Host "Enter your Password" -AsSecureString
$plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(
    [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)
)

# Encode credentials for Basic Auth
$encodedCreds = [Convert]::ToBase64String(
    [Text.Encoding]::UTF8.GetBytes("$($username):$($plainPassword)")
)
$basicAuthValue = "Basic $encodedCreds"

# API URLs
$priorWeekUrl = "https://udeploy.nnnn.net:8443/rest/report/adHoc?dateRange=priorWeek&orderField=application&sortType=asc&type=com.urbancode.ds.subsys.report.domain"

# Set HTTP headers
$headers = @{
    Authorization = $basicAuthValue
}

# Output CSV file
$outputFile = ".\UCD_Prod_Report.csv"
"Application Name,Environment Name,User Name,Start Time,End Time,Component Name,Component Version,Commit URL" | Out-File -FilePath $outputFile -Force

# Fetch application process requests for the prior week
$response = Invoke-WebRequest -Uri $priorWeekUrl -Method Get -Headers $headers
$responseContent = $response.Content | ConvertFrom-Json

# Process each deployment request
$responseContent.items | ForEach-Object {
    $appName = $_.applicationName
    $envName = $_.environmentName
    $userName = $_.userName
    $startTimeUnix = $_.startTime
    $endTimeUnix = $_.endTime

    # Convert UNIX timestamps to local time
    $startTime = (Get-Date "1/1/1970").AddSeconds([int64]([math]::Truncate($startTimeUnix / 1000))).ToLocalTime()
    $endTime = (Get-Date "1/1/1970").AddSeconds([int64]([math]::Truncate($endTimeUnix / 1000))).ToLocalTime()

    # Extract application request ID
    $appRequestID = $_.applicationRequestId
    $appRequestUrl = "https://udeploy.nnnn.net:8443/cli/applicationProcessRequest/info/$appRequestID"

    # Fetch process request details
    $appResponse = Invoke-WebRequest -Uri $appRequestUrl -Method Get -Headers $headers
    $appRequestJson = $appResponse.Content | ConvertFrom-Json

    # Initialize empty flag
    $snapshotEmpty = $true

    # Check for snapshots
    if ($null -ne $appRequestJson.snapshot.id) {
        $snapshotID = $appRequestJson.snapshot.id
        $snapshotUrl = "https://udeploy.nnnn.net:8443/cli/snapshot/getSnapshotVersions?application=$($appRequestJson.application.id)&snapshot=$snapshotID"
        $snapshotResponse = Invoke-WebRequest -Uri $snapshotUrl -Method Get -Headers $headers
        $snapshotJson = $snapshotResponse.Content | ConvertFrom-Json

        # Extract component versions from the snapshot if available
        $snapshotJson | ForEach-Object {
            if ($_.desiredVersions.name) {
                $compName = $_.name
                $compVersion = $_.desiredVersions.name
                $commitURL = $_.desiredVersions.commitUrl
                "$appName,$envName,$userName,$startTime,$endTime,$compName,$compVersion,$commitURL" | Out-File -FilePath $outputFile -Append
                $snapshotEmpty = $false
            }
        }
    }

    # If snapshot is empty OR environment is non-prod, fetch manifest versions
    if ($snapshotEmpty -or $envName -notmatch "PRD|PROD") {
        $manifestUrl = "https://udeploy.nnnn.net:8443/cli/applicationProcessRequest/request/$appRequestID"
        $manifestResponse = Invoke-WebRequest -Uri $manifestUrl -Method Get -Headers $headers
        $manifestJson = $manifestResponse.Content | ConvertFrom-Json

        # Extract versions from the manifest
        $manifestJson.versions | ForEach-Object {
            $compName = $_.componentName
            $compVersion = $_.versionName
            $commitURL = $_.commitUrl

            if ($null -ne $compVersion) {
                "$appName,$envName,$userName,$startTime,$endTime,$compName,$compVersion,$commitURL" | Out-File -FilePath $outputFile -Append
            }
        }
    }
}

Write-Output "Report generation complete. File saved to $outputFile."
