<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Organization Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        #results {
            margin-top: 20px;
        }
        .result-item {
            margin: 10px 0;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>

<h1>Search GitHub Organizations for Repositories</h1>
<form id="searchForm">
    <label for="searchQuery">Search Query:</label>
    <input type="text" id="searchQuery" required>
    <button type="submit">Search</button>
</form>

<div id="results"></div>

<script>
    const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your GitHub token
    const organizations = ['ORG_1', 'ORG_2', 'ORG_3', 'ORG_4', 'ORG_5']; // Add your organizations here

    document.getElementById('searchForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const searchQuery = document.getElementById('searchQuery').value.trim();
        
        // Clear previous results
        document.getElementById('results').innerHTML = 'Searching...';
        if (searchQuery) {
            searchGitHub(searchQuery);
        } else {
            document.getElementById('results').innerHTML = 'Please enter a valid search query.';
        }
    });

    async function searchGitHub(query) {
        const resultsContainer = document.getElementById('results');
        resultsContainer.innerHTML = '';

        for (const org of organizations) {
            const endpoint = `https://api.github.com/search/repositories?q=${encodeURIComponent(query)}+org:${org}`;
            const response = await fetch(endpoint, {
                headers: {
                    'Authorization': `token ${token}`,
                    'User-Agent': 'JavaScript Client',
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                displayResults(data.items, org);
            } else {
                const errorData = await response.json();
                resultsContainer.innerHTML += `<div class="error">Error fetching from ${org}: ${response.status} - ${errorData.message}</div>`;
            }
        }
    }

    function displayResults(items, organization) {
        const resultsContainer = document.getElementById('results');
        if (items && items.length > 0) {
            items.forEach(item => {
                const resultDiv = document.createElement('div');
                resultDiv.classList.add('result-item');
                resultDiv.innerHTML = `<strong>Repository:</strong> <a href="${item.html_url}" target="_blank">${item.name}</a> (Organization: ${organization}) <br> URL: ${item.html_url}`;
                resultsContainer.appendChild(resultDiv);
            });
        } else {
            resultsContainer.innerHTML += `<div>No repositories found in ${organization} for "${searchQuery}".</div>`;
        }
    }
</script>

</body>
</html>









<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Organization Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        #results {
            margin-top: 20px;
        }
        .result-item {
            margin: 10px 0;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>

<h1>Search GitHub Organizations for Repositories</h1>
<form id="searchForm">
    <label for="searchQuery">Search Query:</label>
    <input type="text" id="searchQuery" required>
    <button type="submit">Search</button>
</form>

<div id="results"></div>

<script>
    const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your GitHub token

    document.getElementById('searchForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const searchQuery = document.getElementById('searchQuery').value.trim();
        
        // Clear previous results
        document.getElementById('results').innerHTML = 'Searching...';
        if (searchQuery) {
            fetchOrganizationsAndSearch(searchQuery);
        } else {
            document.getElementById('results').innerHTML = 'Please enter a valid search query.';
        }
    });

    async function fetchOrganizationsAndSearch(query) {
        const resultsContainer = document.getElementById('results');
        resultsContainer.innerHTML = '';

        // Fetch organizations
        const orgsResponse = await fetch('https://api.github.com/user/orgs', {
            headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'JavaScript Client',
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (orgsResponse.ok) {
            const organizations = await orgsResponse.json();
            // Search in each organization
            for (const org of organizations) {
                await searchInOrganization(query, org.login);
            }
        } else {
            const errorData = await orgsResponse.json();
            resultsContainer.innerHTML = `<div class="error">Error fetching organizations: ${orgsResponse.status} - ${errorData.message}</div>`;
        }
    }

    async function searchInOrganization(query, org) {
        const resultsContainer = document.getElementById('results');
        const endpoint = `https://api.github.com/search/repositories?q=${encodeURIComponent(query)}+org:${org}`;
        const response = await fetch(endpoint, {
            headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'JavaScript Client',
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            displayResults(data.items, org);
        } else {
            const errorData = await response.json();
            resultsContainer.innerHTML += `<div class="error">Error fetching from ${org}: ${response.status} - ${errorData.message}</div>`;
        }
    }

    function displayResults(items, organization) {
        const resultsContainer = document.getElementById('results');
        if (items && items.length > 0) {
            items.forEach(item => {
                const resultDiv = document.createElement('div');
                resultDiv.classList.add('result-item');
                resultDiv.innerHTML = `<strong>Repository:</strong> <a href="${item.html_url}" target="_blank">${item.name}</a> (Organization: ${organization}) <br> URL: ${item.html_url}`;
                resultsContainer.appendChild(resultDiv);
            });
        } else {
            resultsContainer.innerHTML += `<div>No repositories found in ${organization} for "${searchQuery}".</div>`;
        }
    }
</script>

</body>
</html>

=======


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Organization Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        #results {
            margin-top: 20px;
        }
        .result-item {
            margin: 10px 0;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }
        .error {
            color: red;
        }
        .file-link {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
</head>
<body>

<h1>Search GitHub Organizations for Repositories</h1>
<form id="searchForm">
    <label for="searchQuery">Search Query:</label>
    <input type="text" id="searchQuery" required>
    <button type="submit">Search</button>
</form>

<div id="results"></div>

<script>
    const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your GitHub token

    document.getElementById('searchForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const searchQuery = document.getElementById('searchQuery').value.trim();
        
        // Clear previous results
        document.getElementById('results').innerHTML = 'Searching...';
        if (searchQuery) {
            fetchOrganizationsAndSearch(searchQuery);
        } else {
            document.getElementById('results').innerHTML = 'Please enter a valid search query.';
        }
    });

    async function fetchOrganizationsAndSearch(query) {
        const resultsContainer = document.getElementById('results');
        resultsContainer.innerHTML = '';

        // Fetch organizations
        const orgsResponse = await fetch('https://api.github.com/user/orgs', {
            headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'JavaScript Client',
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (orgsResponse.ok) {
            const organizations = await orgsResponse.json();
            // Search in each organization
            const results = [];
            for (const org of organizations) {
                const orgResults = await searchInOrganization(query, org.login);
                results.push(...orgResults);
            }
            displayResults(results);
        } else {
            const errorData = await orgsResponse.json();
            resultsContainer.innerHTML = `<div class="error">Error fetching organizations: ${orgsResponse.status} - ${errorData.message}</div>`;
        }
    }

    async function searchInOrganization(query, org) {
        const results = [];
        const endpoint = `https://api.github.com/search/repositories?q=${encodeURIComponent(query)}+org:${org}`;
        const response = await fetch(endpoint, {
            headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'JavaScript Client',
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            if (data.items && data.items.length > 0) {
                data.items.forEach(item => {
                    results.push({
                        name: item.name,
                        url: item.html_url,
                        full_name: item.full_name,
                        description: item.description || 'No description available',
                        language: item.language || 'N/A',
                        stars: item.stargazers_count,
                        forks: item.forks_count,
                        created_at: item.created_at,
                        updated_at: item.updated_at
                    });
                });
            }
        } else {
            const errorData = await response.json();
            console.error(`Error fetching from ${org}: ${response.status} - ${errorData.message}`);
        }
        return results;
    }

    function displayResults(items) {
        const resultsContainer = document.getElementById('results');
        if (items.length > 0) {
            items.forEach(item => {
                const resultDiv = document.createElement('div');
                resultDiv.classList.add('result-item');
                resultDiv.innerHTML = `
                    <strong>Repository Name:</strong> <a href="${item.url}" target="_blank">${item.name}</a><br>
                    <strong>Full Name:</strong> ${item.full_name}<br>
                    <strong>Description:</strong> ${item.description}<br>
                    <strong>Language:</strong> ${item.language}<br>
                    <strong>Stars:</strong> ${item.stars}<br>
                    <strong>Forks:</strong> ${item.forks}<br>
                    <strong>Created At:</strong> ${new Date(item.created_at).toLocaleString()}<br>
                    <strong>Updated At:</strong> ${new Date(item.updated_at).toLocaleString()}<br>
                    <a class="file-link" href="${item.url}">View Repository</a>
                `;
                resultsContainer.appendChild(resultDiv);
            });
        } else {
            resultsContainer.innerHTML += `<div>No repositories found for "${searchQuery}".</div>`;
        }
    }
</script>

</body>
</html>


=====



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Codebase Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

    <h1>GitHub Codebase Search</h1>
    <label for="search">Search Query:</label>
    <input type="text" id="search" placeholder="Enter your search query" required>
    <br><br>
    <button id="searchButton">Search Codebase</button>

    <h2>Results</h2>
    <table id="resultsTable">
        <thead>
            <tr>
                <th>Organization</th>
                <th>Repository</th>
                <th>File Name</th>
                <th>File Path</th>
                <th>URL</th>
            </tr>
        </thead>
        <tbody>
            <!-- Results will be populated here -->
        </tbody>
    </table>

    <script>
        const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your actual token

        document.getElementById('searchButton').onclick = async () => {
            const query = document.getElementById('search').value;
            const resultsTableBody = document.getElementById('resultsTable').getElementsByTagName('tbody')[0];
            resultsTableBody.innerHTML = ''; // Clear previous results

            try {
                // Fetch user's organizations
                const orgsResponse = await fetch('https://api.github.com/user/orgs', {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (!orgsResponse.ok) {
                    console.error('Failed to fetch organizations:', orgsResponse.status, await orgsResponse.text());
                    return;
                }

                const organizations = await orgsResponse.json();
                console.log('Organizations:', organizations); // Log organizations

                // Search code in each organization
                for (const org of organizations) {
                    console.log(`Searching in organization: ${org.login}`); // Log current organization
                    const searchResponse = await fetch(`https://api.github.com/search/code?q=${query}+in:file+org:${org.login}`, {
                        headers: {
                            'Authorization': `token ${token}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });

                    if (!searchResponse.ok) {
                        console.error(`Failed to fetch results for organization ${org.login}:`, searchResponse.status, await searchResponse.text());
                        continue; // Skip this organization if an error occurs
                    }

                    const searchResults = await searchResponse.json();
                    console.log(`Search results for ${org.login}:`, searchResults); // Log search results

                    // Populate the results table
                    searchResults.items.forEach(item => {
                        const row = resultsTableBody.insertRow();
                        row.insertCell(0).innerText = org.login; // Organization
                        row.insertCell(1).innerText = item.repository.name; // Repository
                        row.insertCell(2).innerText = item.name; // File Name
                        row.insertCell(3).innerText = item.path; // File Path
                        row.insertCell(4).innerHTML = `<a href="${item.html_url}" target="_blank">View File</a>`; // URL
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        };
    </script>
</body>
</html>
