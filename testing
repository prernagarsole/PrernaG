<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Search Tool</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>

<h1>Search GitHub Content</h1>
<input type="text" id="search" placeholder="Enter search query...">
<button id="searchButton">Search</button>

<h2>Results:</h2>
<div class="error" id="errorMessage"></div>
<table id="resultsTable">
    <thead>
        <tr>
            <th>Organization</th>
            <th>Repository</th>
            <th>File Name</th>
            <th>File Path</th>
            <th>URL</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your actual token

    document.getElementById('searchButton').onclick = async () => {
        const query = document.getElementById('search').value.trim();
        const resultsTableBody = document.getElementById('resultsTable').getElementsByTagName('tbody')[0];
        resultsTableBody.innerHTML = ''; // Clear previous results
        document.getElementById('errorMessage').innerText = ''; // Clear previous error messages

        if (!query) {
            document.getElementById('errorMessage').innerText = 'Please enter a search query.';
            return;
        }

        try {
            // Fetch user's organizations
            const orgsResponse = await fetch('https://api.github.com/user/orgs', {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (!orgsResponse.ok) {
                const errorMessage = await orgsResponse.text();
                console.error('Failed to fetch organizations:', orgsResponse.status, errorMessage);
                document.getElementById('errorMessage').innerText = 'Failed to fetch organizations. Please check your token.';
                return;
            }

            const organizations = await orgsResponse.json();

            // If no organizations found, inform the user
            if (organizations.length === 0) {
                document.getElementById('errorMessage').innerText = 'No organizations found.';
                return;
            }

            // Iterate through each organization
            for (const org of organizations) {
                // Search for code in the organization's repositories
                const searchResponse = await fetch(`https://api.github.com/search/code?q=${query}+org:${org.login}`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (searchResponse.ok) {
                    const searchResults = await searchResponse.json();
                    searchResults.items.forEach(item => {
                        const row = resultsTableBody.insertRow();
                        row.insertCell(0).innerText = org.login; // Organization
                        row.insertCell(1).innerText = item.repository.name; // Repository
                        row.insertCell(2).innerText = item.name; // File Name
                        row.insertCell(3).innerText = item.path; // File Path
                        row.insertCell(4).innerHTML = `<a href="${item.html_url}" target="_blank">View File</a>`; // URL
                    });
                } else {
                    const errorMessage = await searchResponse.text();
                    console.error(`Failed to fetch code results for organization ${org.login}:`, searchResponse.status, errorMessage);
                }

                // Now search for issues within the organization
                const issuesResponse = await fetch(`https://api.github.com/search/issues?q=${query}+org:${org.login}`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (issuesResponse.ok) {
                    const issuesResults = await issuesResponse.json();
                    issuesResults.items.forEach(issue => {
                        const row = resultsTableBody.insertRow();
                        row.insertCell(0).innerText = org.login; // Organization
                        row.insertCell(1).innerText = issue.repository.name; // Repository
                        row.insertCell(2).innerText = issue.title; // Issue Title
                        row.insertCell(3).innerText = ''; // No File Path for issues
                        row.insertCell(4).innerHTML = `<a href="${issue.html_url}" target="_blank">View Issue</a>`; // URL
                    });
                } else {
                    const errorMessage = await issuesResponse.text();
                    console.error(`Failed to fetch issues for organization ${org.login}:`, issuesResponse.status, errorMessage);
                }

                // Search for repositories
                const reposResponse = await fetch(`https://api.github.com/search/repositories?q=${query}+org:${org.login}`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (reposResponse.ok) {
                    const reposResults = await reposResponse.json();
                    reposResults.items.forEach(repo => {
                        const row = resultsTableBody.insertRow();
                        row.insertCell(0).innerText = org.login; // Organization
                        row.insertCell(1).innerText = repo.name; // Repository
                        row.insertCell(2).innerText = ''; // No specific file name
                        row.insertCell(3).innerText = ''; // No specific file path
                        row.insertCell(4).innerHTML = `<a href="${repo.html_url}" target="_blank">View Repository</a>`; // URL
                    });
                } else {
                    const errorMessage = await reposResponse.text();
                    console.error(`Failed to fetch repositories for organization ${org.login}:`, reposResponse.status, errorMessage);
                }
            }

            // Additional Search for Commit Messages
            const commitsResponse = await fetch(`https://api.github.com/search/commits?q=${query}`, {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.cloak-preview' // Use cloak-preview for commits
                }
            });

            if (commitsResponse.ok) {
                const commitsResults = await commitsResponse.json();
                commitsResults.items.forEach(commit => {
                    const row = resultsTableBody.insertRow();
                    row.insertCell(0).innerText = 'N/A'; // Organization not available
                    row.insertCell(1).innerText = commit.repository.name; // Repository
                    row.insertCell(2).innerText = commit.commit.message; // Commit Message
                    row.insertCell(3).innerText = ''; // No specific file path
                    row.insertCell(4).innerHTML = `<a href="${commit.html_url}" target="_blank">View Commit</a>`; // URL
                });
            } else {
                const errorMessage = await commitsResponse.text();
                console.error(`Failed to fetch commits:`, commitsResponse.status, errorMessage);
            }

        } catch (error) {
            console.error('Error:', error);
            document.getElementById('errorMessage').innerText = 'An unexpected error occurred. Please try again later.';
        }
    };
</script>

</body>
</html>
