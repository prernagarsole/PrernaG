<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ccc;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
    </style>
</head>
<body>

    <h1>Search GitHub Repositories</h1>
    <input type="text" id="searchInput" placeholder="Type to search...">
    <div id="suggestions"></div>
    
    <table id="resultsTable">
        <thead>
            <tr>
                <th>Organization</th>
                <th>Repository</th>
                <th>File Name</th>
                <th>File Path</th>
                <th>URL</th>
            </tr>
        </thead>
        <tbody id="resultsBody"></tbody>
    </table>

    <script>
        const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your token
        const searchInput = document.getElementById('searchInput');
        const resultsBody = document.getElementById('resultsBody');
        const suggestionsBox = document.getElementById('suggestions');

        // Function to fetch user organizations
        async function fetchOrganizations() {
            const response = await fetch('https://api.github.com/user/orgs', {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json',
                },
            });
            return response.json();
        }

        // Function to fetch repositories for an organization
        async function fetchRepositories(org) {
            const response = await fetch(`https://api.github.com/orgs/${org}/repos`, {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json',
                },
            });
            return response.json();
        }

        // Function to search code in a repository
        async function searchCodeInRepo(org, repo, query) {
            const response = await fetch(`https://api.github.com/search/code?q=${query}+in:file+repo:${org}/${repo}`, {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json',
                },
            });
            return response.json();
        }

        // Handle input
        searchInput.addEventListener('input', async () => {
            const query = searchInput.value;
            if (query.length > 0) {
                const orgs = await fetchOrganizations();
                resultsBody.innerHTML = ''; // Clear previous results

                for (const org of orgs) {
                    const repos = await fetchRepositories(org.login);
                    for (const repo of repos) {
                        const searchResults = await searchCodeInRepo(org.login, repo.name, query);
                        if (searchResults.items) {
                            searchResults.items.forEach(item => {
                                const fileName = item.name;
                                const filePath = item.path;
                                const url = item.html_url;
                                const row = `<tr>
                                    <td>${org.login}</td>
                                    <td>${repo.name}</td>
                                    <td>${fileName}</td>
                                    <td>${filePath}</td>
                                    <td><a href="${url}" target="_blank">${url}</a></td>
                                </tr>`;
                                resultsBody.innerHTML += row; // Add row to table
                            });
                        }
                    }
                }

                // If no results found
                if (resultsBody.innerHTML === '') {
                    resultsBody.innerHTML = '<tr><td colspan="5">No repositories or files found.</td></tr>';
                }
            } else {
                resultsBody.innerHTML = ''; // Clear results if input is empty
            }
        });

    </script>
</body>
</html>
