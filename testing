<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Search Tool</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        input[type="text"] {
            width: 300px;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            padding: 10px 15px;
            margin-left: 10px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .error {
            color: red;
        }
        .suggestions {
            border: 1px solid #ddd;
            max-height: 150px;
            overflow-y: auto;
            margin-top: 5px;
            display: none;
            position: absolute;
            background-color: white;
            width: 300px;
            z-index: 1000;
        }
        .suggestion-item {
            padding: 10px;
            cursor: pointer;
        }
        .suggestion-item:hover {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>

<h1>Search GitHub Organizations and Repositories</h1>
<input type="text" id="searchQuery" placeholder="Type to search" oninput="handleInput()" />
<div id="suggestions" class="suggestions"></div>
<div id="errorMessage" class="error"></div>

<table id="resultsTable">
    <thead>
        <tr>
            <th>Organization</th>
            <th>Repository</th>
            <th>File Name</th>
            <th>File Path</th>
            <th>URL</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    // Replace with your GitHub personal access token
    const token = 'YOUR_GITHUB_PERSONAL_ACCESS_TOKEN'; // Replace with your token
    const resultsTable = document.getElementById('resultsTable').getElementsByTagName('tbody')[0];
    const errorMessage = document.getElementById('errorMessage');
    const suggestionsContainer = document.getElementById('suggestions');

    async function fetchOrganizations() {
        const response = await fetch('https://api.github.com/user/orgs', {
            headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (response.ok) {
            return await response.json();
        } else {
            throw new Error('Failed to fetch organizations');
        }
    }

    async function searchAll(query) {
        const organizations = await fetchOrganizations();
        let searchPromises = [];

        organizations.forEach(org => {
            // Create search promises for code
            searchPromises.push(searchCode(query, org.login));
        });

        // Wait for all search results to be returned
        const results = await Promise.all(searchPromises);
        return results.flat(); // Flatten the results
    }

    async function searchCode(query, org) {
        const response = await fetch(`https://api.github.com/search/code?q=${encodeURIComponent(query)}+org:${org}`, {
            headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            if (data.items && data.items.length > 0) {
                return data.items.map(item => ({
                    organization: org,
                    repository: item.repository.full_name,
                    file_name: item.name,
                    path: item.path,
                    html_url: item.html_url
                }));
            } else {
                return []; // No items found
            }
        } else {
            throw new Error('Failed to search code: ' + response.status + ' ' + response.statusText);
        }
    }

    function displayResults(results) {
        resultsTable.innerHTML = ''; // Clear previous results
        if (results.length === 0) {
            errorMessage.textContent = 'No results found.';
            return;
        }

        // Populate the table with results
        results.forEach(result => {
            const row = resultsTable.insertRow();
            const orgCell = row.insertCell(0);
            const repoCell = row.insertCell(1);
            const fileCell = row.insertCell(2);
            const pathCell = row.insertCell(3);
            const urlCell = row.insertCell(4);

            orgCell.textContent = result.organization || 'N/A';
            repoCell.textContent = result.repository || 'N/A';
            fileCell.textContent = result.file_name || 'N/A';
            pathCell.textContent = result.path || 'N/A';
            urlCell.innerHTML = result.html_url ? `<a href="${result.html_url}" target="_blank">${result.html_url}</a>` : 'N/A';
        });
    }

    async function handleInput() {
        const query = document.getElementById('searchQuery').value.trim();
        suggestionsContainer.innerHTML = ''; // Clear previous suggestions
        errorMessage.textContent = ''; // Clear previous error messages

        if (!query) {
            suggestionsContainer.style.display = 'none';
            return;
        }

        try {
            const searchResults = await searchAll(query);
            displayResults(searchResults);
            showSuggestions(searchResults);
        } catch (error) {
            errorMessage.textContent = error.message;
        }
    }

    function showSuggestions(results) {
        suggestionsContainer.innerHTML = ''; // Clear previous suggestions

        if (results.length === 0) {
            suggestionsContainer.style.display = 'none';
            return;
        }

        results.forEach(result => {
            const suggestionItem = document.createElement('div');
            suggestionItem.className = 'suggestion-item';
            suggestionItem.innerHTML = `${result.file_name} in ${result.repository}`;
            suggestionItem.onclick = () => {
                document.getElementById('searchQuery').value = result.file_name;
                suggestionsContainer.innerHTML = '';
                suggestionsContainer.style.display = 'none';
                displayResults([result]); // Show the specific result
            };
            suggestionsContainer.appendChild(suggestionItem);
        });

        suggestionsContainer.style.display = 'block';
    }
</script>

</body>
</html>
